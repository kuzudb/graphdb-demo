"""
Generate node and edge data files for example study.

Assumes the following files pre-exist:
- node/city.csv
- node/company.csv

The rest of the files are generated by this script.

Once the data is generated, some manual modifications are done to create realistic disputed transactions.

Manually create a file node/dispute.csv with some sample transaction IDs (from the generated data)
that we will analyze as disputed transactions.
"""
import random
from pathlib import Path
from typing import Any

import polars as pl
from faker import Faker

Record = dict[str, Any]


def get_random_amount_usd(company_type: str) -> float:
    if company_type.lower() in ["hotel", "telecom"]:
        return round(random.uniform(100.0, 2500.0), 2)
    return round(random.uniform(5.0, 500.0), 2)


def get_company_type(companies_df: pl.DataFrame, company_id: int) -> str:
    return companies_df.filter(pl.col("company_id") == company_id).get_column("type").to_list()[0]


def write_client_csv(n: int = 1000) -> pl.DataFrame:
    """
    Write node file client.csv
    """

    def generate_client(id: int) -> Record:
        full_name = f"{fake.first_name()} {fake.random_letter().upper()}."
        record = {
            "id": int(id),
            "name": full_name,
            "age": random.randint(18, 65),
        }
        return record

    clients = [generate_client(i) for i in range(1, n + 1)]
    df = pl.DataFrame(clients)
    df.write_csv(f"{NODE_PATH}/client.csv")
    return df


def write_merchant_and_location_csv(max_companies: int, n: int = 100) -> pl.DataFrame:
    """
    Write node file merchant.csv
    Write edge file belongs_to.csv
    Write edge file located_in.csv
    """
    # Set max_companies to the number of companies in company.csv
    merchants = []
    for i in range(1, n + 1):
        # Assume a maximum of 15 cities
        city_id = random.choice(range(1, 16))
        merchant_id = random.randint(1, max_companies)
        tuples = (i, merchant_id, city_id)
        merchants.append(tuples)
    df = pl.DataFrame(merchants, schema=["merchant_id", "company_id", "city_id"]).sort(
        ["merchant_id", "company_id"]
    )
    df.write_csv(f"{NODE_PATH}/merchant.csv")
    df.select("merchant_id", "company_id").write_csv(
        f"{REL_PATH}/belongs_to.csv", include_header=False
    )
    df.select("merchant_id", "city_id").write_csv(
        f"{REL_PATH}/located_in.csv", include_header=False
    )
    return df


def write_transaction_csv(
    client_df: pl.DataFrame, merchant_df: pl.DataFrame, n: int = 1000
) -> None:
    """
    Write edge file transacted_with.csv
    """
    client_ids = client_df.get_column("id").to_list()
    merchant_ids = merchant_df.get_column("merchant_id").to_list()
    company_ids = merchant_df.get_column("company_id").to_list()
    merchant_lookup = {merchant_ids[i]: company_ids[i] for i in range(len(merchant_ids))}
    companies_df = pl.read_csv(f"{NODE_PATH}/company.csv")
    transactions = []
    for i in range(1, n + 1):
        client_id = random.choice(client_ids)
        merchant_id = random.choice(merchant_ids)
        amount = get_random_amount_usd(get_company_type(companies_df, merchant_lookup[merchant_id]))
        timestamp = f"{fake.date_between(start_date='-1y', end_date='now')} {fake.time()}"
        tuples = (i, client_id, merchant_id, amount, timestamp)
        transactions.append(tuples)

    # Randomly sample 2% of clients to have more transactions than others
    prolific_clients = random.sample(client_ids, int(n * 0.02))
    print(f"Randomly selected {len(prolific_clients)} prolific clients out of {n} clients.")
    for i in range(1, n + 1):
        if i in prolific_clients:
            for _ in range(5):
                client_id = i
                merchant_id = random.choice(merchant_ids)
                amount = get_random_amount_usd(
                    get_company_type(companies_df, merchant_lookup[merchant_id])
                )
                timestamp = f"{fake.date_between(start_date='-1y', end_date='now')} {fake.time()}"
                tuples = (i + n, client_id, merchant_id, amount, timestamp)
                transactions.append(tuples)

    df = pl.DataFrame(
        transactions,
        schema=["transaction_id", "client_id", "merchant_id", "amount_usd", "timestamp"],
    )
    # Write `transacted_with.csv` edge file with transaction_id as an edge property
    df.select("client_id", "merchant_id", "transaction_id", "amount_usd", "timestamp").write_csv(
        f"{REL_PATH}/transacted_with.csv", include_header=False
    )
    print(f"Wrote {len(df)} transactions to transacted_with.csv")


def main() -> None:
    client_df = write_client_csv(n=1000)
    merchant_df = write_merchant_and_location_csv(max_companies=15, n=100)
    write_transaction_csv(client_df, merchant_df, n=1000)


if __name__ == "__main__":
    SEED = 1
    random.seed(SEED)
    Faker.seed(SEED)
    fake = Faker(locale="en_US")

    NODE_PATH = "./node"
    REL_PATH = "./rel"
    Path.mkdir(Path(NODE_PATH), exist_ok=True, parents=True)
    Path.mkdir(Path(REL_PATH), exist_ok=True, parents=True)

    main()
